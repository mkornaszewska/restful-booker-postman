{
	"info": {
		"_postman_id": "651e7bdd-07cc-45f4-bdaa-08e9b9b9aca7",
		"name": "restful-booker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29564192"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "createToken_valid_credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check the active environment\", () => {\r",
									"  pm.expect(pm.environment.name).to.eql(\"restful-booker\");\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Property 'token' exists\", function() {\r",
									"  pm.expect(response).to.have.property('token');\r",
									"});\r",
									"\r",
									"pm.test(\"Property 'token' is a string\", function () {\r",
									"    pm.expect(response.token).to.be.an('string');\r",
									"});\r",
									"\r",
									"pm.environment.set(\"token\", response.token);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "createToken_random_credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check the active environment\", () => {\r",
									"  pm.expect(pm.environment.name).to.eql(\"restful-booker\");\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Property 'reason' exists\", function() {\r",
									"  pm.expect(response).to.have.property('reason');\r",
									"});\r",
									"\r",
									"pm.test(\"Property 'reason' is a string\", function () {\r",
									"    pm.expect(response.reason).to.be.an('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{randomPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "booking",
			"item": [
				{
					"name": "createBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"bookingid\": { \"type\": \"integer\"},\r",
									"            \"booking\": {\r",
									"                \"properties\": {\r",
									"                    \"firstname\": {\"type\": \"string\"},\r",
									"                    \"lastname\":  {\"type\": \"string\"},\r",
									"                    \"totalprice\": {\"type\": \"number\"},\r",
									"                    \"depositpaid\": {\"type\": \"boolean\"},\r",
									"                        \"bookingdates\": {\r",
									"                            \"properties\": {\r",
									"                                \"checkin\": {\"type\": \"string\", \"format\": \"date\"},\r",
									"                                \"checkout\": {\"type\": \"string\", \"format\": \"date\"}\r",
									"                                },\r",
									"                                \"required\": [\"checkin\", \"checkout\"]\r",
									"                             },\r",
									"                    \"additionalneeds\": {\"type\": \"string\"}\r",
									"                        },\r",
									"                    \"required\": [\"firstname\", \"lastname\", \"totalprice\", \"depositpaid\", \"bookingdates\", \"additionalneeds\"]\r",
									"                     }\r",
									"                },\r",
									"            \"required\": [\"bookingid\", \"booking\"]\r",
									"        };\r",
									"\r",
									"pm.test(\"Validate schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"firstname\", response.booking.firstname);\r",
									"pm.environment.set(\"lastname\", response.booking.lastname);\r",
									"pm.environment.set(\"depositpaid\", response.booking.depositpaid);\r",
									"pm.environment.set(\"checkin\", response.booking.bookingdates.checkin);\r",
									"pm.environment.set(\"checkout\", response.booking.bookingdates.checkout);\r",
									"pm.environment.set(\"idToUpdate\", response.bookingid);\r",
									"\r",
									"pm.environment.set(\"req\", pm.request)\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"totalPrice\", _.random(100, 150));\r",
									"\r",
									"var moment = require('moment');\r",
									"pm.environment.set(\"pastDate\", moment().subtract(10, 'day').format(\"YYYY-MM-DD\"));\r",
									"pm.environment.set(\"futureDate\", moment().add(10, 'day').format(\"YYYY-MM-DD\"));\r",
									"\r",
									"var list = [\"Breakfast\", \"Pet\", \"Parking spot\"]\r",
									"pm.environment.set(\"additionalNeeds\", _.shuffle(list)[0])\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"{{$randomFirstName}}\",\r\n    \"lastname\": \"{{$randomLastName}}\",\r\n    \"totalprice\": {{totalPrice}},\r\n    \"depositpaid\": {{$randomBoolean}},\r\n    \"bookingdates\": {\r\n        \"checkin\": \"{{pastDate}}\",\r\n        \"checkout\": \"{{futureDate}}\"\r\n    },\r\n    \"additionalneeds\": \"{{additionalNeeds}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"{{firstname}}\",\r\n    \"lastname\": \"{{lastname}}\",\r\n    \"totalprice\": {{totalPrice}},\r\n    \"depositpaid\": {{$randomBoolean}},\r\n    \"bookingdates\": {\r\n        \"checkin\": \"{{checkin}}\",\r\n        \"checkout\": \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\": \"{{additionalNeeds}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{idToUpdate}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "partialUpdateBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"{{$randomFirstName}}\",\r\n    \"lastname\": \"{{lastname}}\",\r\n    \"totalprice\": {{totalPrice}},\r\n    \"depositpaid\": {{$randomBoolean}},\r\n    \"bookingdates\": {\r\n        \"checkin\": \"{{checkin}}\",\r\n        \"checkout\": \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\": \"{{additionalNeeds}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{idToUpdate}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "token={{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/booking/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{idToUpdate}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getBookingIds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check the active environment\", () => {\r",
									"  pm.expect(pm.environment.name).to.eql(\"restful-booker\");\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"\r",
									"\t\"items\": {\r",
									"\t\"minItems\": 5,\r",
									"\t\"type\": \"array\",\r",
									"\t\"type\": \"object\",\r",
									"\t\"properties\": {\r",
									"\t\t\"bookingid\": {\"type\": \"integer\"}\r",
									"\t\t},\r",
									"\t\"required\": [\"bookingid\"]\r",
									"\t}\r",
									"}\r",
									"pm.test(\"Validate JSON schema\", () => {pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"bookingid\", response[0].bookingid);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/booking",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "Eric",
									"description": "Return bookings with a specific firstname",
									"disabled": true
								},
								{
									"key": "lastname",
									"value": "Jones",
									"description": "Return bookings with a specific lastname",
									"disabled": true
								},
								{
									"key": "checkin",
									"value": "2022-01-19",
									"description": "Return bookings that have a checkin date greater than or equal to the set checkin date. Format must be CCYY-MM-DD",
									"disabled": true
								},
								{
									"key": "checkout",
									"value": "2022-09-06",
									"description": "Return bookings that have a checkout date greater than or equal to the set checkout date. Format must be CCYY-MM-DD",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getBookingIds_filter_existing_firstName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"minItems\": 1,\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"bookingid\": {\r",
									"                \"type\": \"integer\"\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\r",
									"            \"bookingid\"\r",
									"        ]\r",
									"    },\r",
									"};\r",
									"\r",
									"pm.test(\"Validate JSON schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"bookingid\", response[0].bookingid);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/booking?firstname={{firstname}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "lastname",
									"value": "Jones",
									"description": "Return bookings with a specific lastname",
									"disabled": true
								},
								{
									"key": "checkin",
									"value": "2022-01-19",
									"description": "Return bookings that have a checkin date greater than or equal to the set checkin date. Format must be CCYY-MM-DD",
									"disabled": true
								},
								{
									"key": "checkout",
									"value": "2022-09-06",
									"description": "Return bookings that have a checkout date greater than or equal to the set checkout date. Format must be CCYY-MM-DD",
									"disabled": true
								},
								{
									"key": "firstname",
									"value": "{{firstname}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getBookingIds_filter_existing_lastName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check the active environment\", () => {\r",
									"  pm.expect(pm.environment.name).to.eql(\"restful-booker\");\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"minItems\": 1,\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"bookingid\": {\r",
									"                \"type\": \"integer\"\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\r",
									"            \"bookingid\"\r",
									"        ]\r",
									"    },\r",
									"};\r",
									"\r",
									"pm.test(\"Validate JSON schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"bookingid\", response[0].bookingid);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/booking?lastname={{lastname}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "Eric",
									"description": "Return bookings with a specific firstname",
									"disabled": true
								},
								{
									"key": "checkin",
									"value": "2022-01-19",
									"description": "Return bookings that have a checkin date greater than or equal to the set checkin date. Format must be CCYY-MM-DD",
									"disabled": true
								},
								{
									"key": "checkout",
									"value": "2022-09-06",
									"description": "Return bookings that have a checkout date greater than or equal to the set checkout date. Format must be CCYY-MM-DD",
									"disabled": true
								},
								{
									"key": "lastname",
									"value": "{{lastname}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getBookingIds_filter_existing_checkin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check the active environment\", () => {\r",
									"  pm.expect(pm.environment.name).to.eql(\"restful-booker\");\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"minItems\": 1,\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"bookingid\": {\r",
									"                \"type\": \"integer\"\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\r",
									"            \"bookingid\"\r",
									"        ]\r",
									"    },\r",
									"};\r",
									"\r",
									"pm.test(\"Validate JSON schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"bookingid\", response[0].bookingid);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/booking?checkin={{checkin}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "Eric",
									"description": "Return bookings with a specific firstname",
									"disabled": true
								},
								{
									"key": "lastname",
									"value": "Jones",
									"description": "Return bookings with a specific lastname",
									"disabled": true
								},
								{
									"key": "checkout",
									"value": "2022-09-06",
									"description": "Return bookings that have a checkout date greater than or equal to the set checkout date. Format must be CCYY-MM-DD",
									"disabled": true
								},
								{
									"key": "checkin",
									"value": "{{checkin}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getBookingIds_filter_existing_checkout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check the active environment\", () => {\r",
									"  pm.expect(pm.environment.name).to.eql(\"restful-booker\");\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"minItems\": 1,\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"bookingid\": {\r",
									"                \"type\": \"integer\"\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\r",
									"            \"bookingid\"\r",
									"        ]\r",
									"    },\r",
									"};\r",
									"\r",
									"pm.test(\"Validate JSON schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"bookingid\", response[0].bookingid);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking?checkout={{checkout}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "Eric",
									"description": "Return bookings with a specific firstname",
									"disabled": true
								},
								{
									"key": "lastname",
									"value": "Jones",
									"description": "Return bookings with a specific lastname",
									"disabled": true
								},
								{
									"key": "checkin",
									"value": "2022-01-19",
									"description": "Return bookings that have a checkin date greater than or equal to the set checkin date. Format must be CCYY-MM-DD",
									"disabled": true
								},
								{
									"key": "checkout",
									"value": "{{checkout}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check the active environment\", () => {\r",
									"  pm.expect(pm.environment.name).to.eql(\"restful-booker\");\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"m.test(\"Status code is 200\", function(){\r",
									"pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function() {\r",
									"pm.response.to.have.header(\"Content-Type\");\r",
									"pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"firstname\": {\"type\": \"string\"},\r",
									"        \"lastname\": {\"type\": \"string\"},\r",
									"        \"totalprice\": {\"type\": \"number\"},\r",
									"        \"depositpaid\": {\"type\": \"boolean\"},\r",
									"        \"bookingdates\": {\r",
									"            \"properties\": {\r",
									"                \"checkin\": {\"type\": \"string\", \"format\": \"date\"},\r",
									"                \"checkout\": {\"type\": \"string\", \"format\": \"date\"},\r",
									"            },\r",
									"            \"required\": [\"checkin\", \"checkout\"]\r",
									"            }\r",
									"        },\r",
									"        \"additionalneeds\": {\"type\": \"string\"},\r",
									"        \"required\": [\"firstname\", \"lastname\", \"totalprice\", \"depositpaid\", \"additionalneeds\"]\r",
									"};\r",
									"\r",
									"pm.test(\"Validate JSON schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/booking/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{bookingid}}",
									"description": "bookingid taken from getBookingIds endpoint"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}