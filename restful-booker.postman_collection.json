{
	"info": {
		"_postman_id": "651e7bdd-07cc-45f4-bdaa-08e9b9b9aca7",
		"name": "restful-booker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29564192"
	},
	"item": [
		{
			"name": "auth",
			"item": [
				{
					"name": "createToken_valid_credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Property 'token' exists\", function() {\r",
									"  pm.expect(response).to.have.property('token');\r",
									"});\r",
									"\r",
									"pm.test(\"Property 'token' is a string\", function () {\r",
									"    pm.expect(response.token).to.be.an('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "createToken_random_credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Property 'reason' exists\", function() {\r",
									"  pm.expect(response).to.have.property('reason');\r",
									"});\r",
									"\r",
									"pm.test(\"Property 'reason' is a string\", function () {\r",
									"    pm.expect(response.reason).to.be.an('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{$randomUserName}}\",\r\n    \"password\": \"{{randomPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "booking",
			"item": [
				{
					"name": "getBookingIds(WIP)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"items\": {\r",
									"        \"minItems\": 5,\r",
									"        \"properties\": {\r",
									"            \"bookingid\": {\r",
									"                \"type\": \"integer\"\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\r",
									"            \"bookingid\"\r",
									"        ],\r",
									"        \"type\": \"object\"\r",
									"    },\r",
									"    \"type\": \"array\"\r",
									"};\r",
									"\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"bookingid\", response[0].bookingid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/booking",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "Eric",
									"description": "Return bookings with a specific firstname",
									"disabled": true
								},
								{
									"key": "lastname",
									"value": "Jones",
									"description": "Return bookings with a specific lastname",
									"disabled": true
								},
								{
									"key": "checkin",
									"value": "2022-01-19",
									"description": "Return bookings that have a checkin date greater than or equal to the set checkin date. Format must be CCYY-MM-DD",
									"disabled": true
								},
								{
									"key": "checkout",
									"value": "2022-09-06",
									"description": "Return bookings that have a checkout date greater than or equal to the set checkout date. Format must be CCYY-MM-DD",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getBookingIds_filter_by_firstName(WIP)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"items\": {\r",
									"        \"minItems\": 1,\r",
									"        \"properties\": {\r",
									"            \"bookingid\": {\r",
									"                \"type\": \"integer\"\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\r",
									"            \"bookingid\"\r",
									"        ],\r",
									"        \"type\": \"object\"\r",
									"    },\r",
									"    \"type\": \"array\"\r",
									"};\r",
									"\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"bookingid\", response[0].bookingid);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/booking?firstname=Eric",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "Eric",
									"description": "Return bookings with a specific firstname"
								},
								{
									"key": "lastname",
									"value": "Jones",
									"description": "Return bookings with a specific lastname",
									"disabled": true
								},
								{
									"key": "checkin",
									"value": "2022-01-19",
									"description": "Return bookings that have a checkin date greater than or equal to the set checkin date. Format must be CCYY-MM-DD",
									"disabled": true
								},
								{
									"key": "checkout",
									"value": "2022-09-06",
									"description": "Return bookings that have a checkout date greater than or equal to the set checkout date. Format must be CCYY-MM-DD",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getBookingIds_filter_by_lastName(WIP)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"items\": {\r",
									"        \"minItems\": 1,\r",
									"        \"properties\": {\r",
									"            \"bookingid\": {\r",
									"                \"type\": \"integer\"\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\r",
									"            \"bookingid\"\r",
									"        ],\r",
									"        \"type\": \"object\"\r",
									"    },\r",
									"    \"type\": \"array\"\r",
									"};\r",
									"\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"bookingid\", response[0].bookingid);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/booking?lastname=Jones",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "Eric",
									"description": "Return bookings with a specific firstname",
									"disabled": true
								},
								{
									"key": "lastname",
									"value": "Jones",
									"description": "Return bookings with a specific lastname"
								},
								{
									"key": "checkin",
									"value": "2022-01-19",
									"description": "Return bookings that have a checkin date greater than or equal to the set checkin date. Format must be CCYY-MM-DD",
									"disabled": true
								},
								{
									"key": "checkout",
									"value": "2022-09-06",
									"description": "Return bookings that have a checkout date greater than or equal to the set checkout date. Format must be CCYY-MM-DD",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getBookingIds_filter_by_checkin(WIP)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"items\": {\r",
									"        \"minItems\": 1,\r",
									"        \"properties\": {\r",
									"            \"bookingid\": {\r",
									"                \"type\": \"integer\"\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\r",
									"            \"bookingid\"\r",
									"        ],\r",
									"        \"type\": \"object\"\r",
									"    },\r",
									"    \"type\": \"array\"\r",
									"};\r",
									"\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"bookingid\", response[0].bookingid);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/booking?checkin=2022-01-19",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "Eric",
									"description": "Return bookings with a specific firstname",
									"disabled": true
								},
								{
									"key": "lastname",
									"value": "Jones",
									"description": "Return bookings with a specific lastname",
									"disabled": true
								},
								{
									"key": "checkin",
									"value": "2022-01-19",
									"description": "Return bookings that have a checkin date greater than or equal to the set checkin date. Format must be CCYY-MM-DD"
								},
								{
									"key": "checkout",
									"value": "2022-09-06",
									"description": "Return bookings that have a checkout date greater than or equal to the set checkout date. Format must be CCYY-MM-DD",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getBookingIds_filter_by_checkout(WIP)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"items\": {\r",
									"        \"minItems\": 2,\r",
									"        \"properties\": {\r",
									"            \"bookingid\": {\r",
									"                \"type\": \"integer\"\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\r",
									"            \"bookingid\"\r",
									"        ],\r",
									"        \"type\": \"object\"\r",
									"    },\r",
									"    \"type\": \"array\"\r",
									"};\r",
									"\r",
									"pm.test(\"Validate schema\", () => {\r",
									"pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"bookingid\", response[0].bookingid);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/booking?checkout=2022-09-06",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "firstname",
									"value": "Eric",
									"description": "Return bookings with a specific firstname",
									"disabled": true
								},
								{
									"key": "lastname",
									"value": "Jones",
									"description": "Return bookings with a specific lastname",
									"disabled": true
								},
								{
									"key": "checkin",
									"value": "2022-01-19",
									"description": "Return bookings that have a checkin date greater than or equal to the set checkin date. Format must be CCYY-MM-DD",
									"disabled": true
								},
								{
									"key": "checkout",
									"value": "2022-09-06",
									"description": "Return bookings that have a checkout date greater than or equal to the set checkout date. Format must be CCYY-MM-DD"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "getBooking(WIP)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"properties\": {\r",
									"        \"bookingdates\": {\r",
									"            \"properties\": {\r",
									"                \"checkin\": {\r",
									"                    \"format\": \"date\",\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"checkout\": {\r",
									"                    \"format\": \"date\",\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"checkin\",\r",
									"                \"checkout\"\r",
									"            ],\r",
									"            \"type\": \"object\"\r",
									"        },\r",
									"        \"depositpaid\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"firstname\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"lastname\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"totalprice\": {\r",
									"            \"type\": \"number\"\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"firstname\",\r",
									"        \"lastname\",\r",
									"        \"totalprice\",\r",
									"        \"depositpaid\",\r",
									"        \"bookingdates\"\r",
									"    ],\r",
									"    \"type\": \"object\"\r",
									"}\r",
									"\r",
									"pm.test(\"Validate schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/booking/:id",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{bookingid}}",
									"description": "bookingid taken from getBookingIds endpoint"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "createBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"bookingid\": { \"type\": \"integer\"},\r",
									"            \"booking\": {\r",
									"                \"properties\": {\r",
									"                    \"firstname\": {\"type\": \"string\"},\r",
									"                    \"lastname\":  {\"type\": \"string\"},\r",
									"                    \"totalprice\": {\"type\": \"number\"},\r",
									"                    \"depositpaid\": {\"type\": \"boolean\"},\r",
									"                        \"bookingdates\": {\r",
									"                            \"properties\": {\r",
									"                                \"checkin\": {\"type\": \"string\", \"format\": \"date\"},\r",
									"                                \"checkout\": {\"type\": \"string\", \"format\": \"date\"}\r",
									"                                },\r",
									"                                \"required\": [\"checkin\", \"checkout\"]\r",
									"                             },\r",
									"                    \"additionalneeds\": {\"type\": \"string\"}\r",
									"                        },\r",
									"                    \"required\": [\"firstname\", \"lastname\", \"totalprice\", \"depositpaid\", \"bookingdates\", \"additionalneeds\"]\r",
									"                     }\r",
									"                },\r",
									"            \"required\": [\"bookingid\", \"booking\"]\r",
									"        };\r",
									"\r",
									"pm.test(\"Validate schema\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.environment.set(\"firstname\", response.booking.firstname);\r",
									"pm.environment.set(\"lastname\", response.booking.lastname);\r",
									"pm.environment.set(\"depositpaid\", response.booking.depositpaid);\r",
									"pm.environment.set(\"checkin\", response.booking.bookingdates.checkin);\r",
									"pm.environment.set(\"checkout\", response.booking.bookingdates.checkout);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"totalPrice\", _.random(100, 150));\r",
									"\r",
									"var moment = require('moment');\r",
									"pm.environment.set(\"pastDate\", moment().subtract(10, 'day').format(\"YYYY-MM-DD\"));\r",
									"pm.environment.set(\"futureDate\", moment().add(10, 'day').format(\"YYYY-MM-DD\"));\r",
									"\r",
									"var list = [\"Breakfast\", \"Pet\", \"Parking spot\"]\r",
									"pm.environment.set(\"additionalNeeds\", _.shuffle(list)[0])\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"{{$randomFirstName}}\",\r\n    \"lastname\": \"{{$randomLastName}}\",\r\n    \"totalprice\": {{totalPrice}},\r\n    \"depositpaid\": {{$randomBoolean}},\r\n    \"bookingdates\": {\r\n        \"checkin\": \"{{pastDate}}\",\r\n        \"checkout\": \"{{futureDate}}\"\r\n    },\r\n    \"additionalneeds\": \"{{additionalNeeds}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "updateBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"Jim\",\r\n    \"lastname\": \"Brown\",\r\n    \"totalprice\": 112,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2024-02-01\",\r\n        \"checkout\": \"2024-03-01\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking/2106",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								"2106"
							]
						}
					},
					"response": []
				},
				{
					"name": "partialUpdateBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"Jim\",\r\n    \"lastname\": \"Brown\",\r\n    \"totalprice\": 112,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2024-02-01\",\r\n        \"checkout\": \"2024-03-01\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking/2106",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								"2106"
							]
						}
					},
					"response": []
				},
				{
					"name": "deleteBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\": \"Jim\",\r\n    \"lastname\": \"Brown\",\r\n    \"totalprice\": 112,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2024-02-01\",\r\n        \"checkout\": \"2024-03-01\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/booking/2106",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"booking",
								"2106"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "healthCheck",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/ping",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": []
		}
	]
}